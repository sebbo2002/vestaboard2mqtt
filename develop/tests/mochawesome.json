{
  "stats": {
    "suites": 12,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-29T19:59:43.332Z",
    "end": "2025-07-29T19:59:43.365Z",
    "duration": 33,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7c217248-c911-4c4b-a962-323d9918e3c7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6efd8b06-0c1f-4346-bdf9-84b9ba99d88c",
          "title": "Cache",
          "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/cache.ts",
          "file": "/test/lib/cache.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d9990701-0858-4631-9a12-0e9258bb95b7",
              "title": "set() / get() / delete()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/cache.ts",
              "file": "/test/lib/cache.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Cache set() / get() / delete() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cache=new import_cache.default(\"tests\");assert.strictEqual(await cache.get(\"test\"),null);await cache.set(\"test\",\"foo\");assert.strictEqual(await cache.get(\"test\"),\"foo\");await cache.delete(\"test\")",
                  "err": {},
                  "uuid": "cc9d0fa4-ed11-400c-8819-0d25c44c6388",
                  "parentUUID": "d9990701-0858-4631-9a12-0e9258bb95b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc9d0fa4-ed11-400c-8819-0d25c44c6388"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c4c3749-307c-4188-8352-9949323e5473",
          "title": "Calendar",
          "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/calendar.ts",
          "file": "/test/lib/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2f7d0bd8-52fc-4688-8477-45ce648a8d6c",
              "title": "isSameDay()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/calendar.ts",
              "file": "/test/lib/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (1)",
                  "fullTitle": "Calendar isSameDay() should work (1)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new Date;const b=new Date;assert.equal(import_calendar.default.isSameDay(a,b),true)",
                  "err": {},
                  "uuid": "6677900e-e96c-4141-8ab8-f8e9ca6865b5",
                  "parentUUID": "2f7d0bd8-52fc-4688-8477-45ce648a8d6c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (2)",
                  "fullTitle": "Calendar isSameDay() should work (2)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new Date(\"2022-01-10T10:35:00.000Z\");const b=new Date(\"2022-02-10T10:35:00.000Z\");assert.equal(import_calendar.default.isSameDay(a,b),false)",
                  "err": {},
                  "uuid": "32b3af42-c719-4c07-aedc-0285f9c6c680",
                  "parentUUID": "2f7d0bd8-52fc-4688-8477-45ce648a8d6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6677900e-e96c-4141-8ab8-f8e9ca6865b5",
                "32b3af42-c719-4c07-aedc-0285f9c6c680"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "164d44a5-0b3a-430d-9313-41d032cbde32",
          "title": "Message",
          "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
          "file": "/test/lib/message.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c185ca06-c16e-4c68-b2df-c30f0ec1b63a",
              "title": "write()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start writing from top/left",
                  "fullTitle": "Message write() should start writing from top/left",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;msg.write(\"Hello World\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# H E L L O   W O R L D                        #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "ec05c5be-b0f5-464a-8c5b-967d6d7dd2a8",
                  "parentUUID": "c185ca06-c16e-4c68-b2df-c30f0ec1b63a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept line & row for positioning",
                  "fullTitle": "Message write() should accept line & row for positioning",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;msg.write(\"Hello World\",{line:2,row:5});assert.strictEqual(msg.toString(),\"#==============================================#\\n#                                              #\\n#                                              #\\n#           H E L L O   W O R L D              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "ac1d73e2-6438-49e6-ad11-bd5e67758ff6",
                  "parentUUID": "c185ca06-c16e-4c68-b2df-c30f0ec1b63a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add another line if text is too long",
                  "fullTitle": "Message write() should add another line if text is too long",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;msg.write(\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# L O R E M   I P S U M   D O L O R   S I T    #\\n# A M E T ,   C O N S E T E T U R              #\\n# S A D I P S C I N G   E L I T R ,   S E D    #\\n# D I A M   N O N U M Y   E I R M O D          #\\n# T E M P O R   I N V I D U N T                #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "0d533919-2ebb-4b23-83da-8e9e5db1c068",
                  "parentUUID": "c185ca06-c16e-4c68-b2df-c30f0ec1b63a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with words > board length",
                  "fullTitle": "Message write() should work with words > board length",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;msg.write(\"Lorem-ipsum-dolor-sit-amet\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# L O R E M - I P S U M - D O L O R - S I T -  #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "4a8fde4d-9918-42f5-84b7-7f203b24bed7",
                  "parentUUID": "c185ca06-c16e-4c68-b2df-c30f0ec1b63a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow to use CURRENT and NEXT line flags",
                  "fullTitle": "Message write() should allow to use CURRENT and NEXT line flags",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;msg.write(\"13:00\",{line:import_message.MessageWriteOptionsLine.CURRENT});msg.write(\"Daily\",{line:import_message.MessageWriteOptionsLine.CURRENT,row:6});msg.write(\"\",{line:import_message.MessageWriteOptionsLine.NEXT});msg.write(\"18:00\",{line:import_message.MessageWriteOptionsLine.NEXT});msg.write(\"Fischst\\xE4bchen, Spinat & Ei\",{line:import_message.MessageWriteOptionsLine.CURRENT,row:6});msg.write(\"\",{line:import_message.MessageWriteOptionsLine.NEXT});msg.write(\"20:00\",{line:import_message.MessageWriteOptionsLine.NEXT});msg.write(\"Sandm\\xE4nnchen\",{line:import_message.MessageWriteOptionsLine.CURRENT,row:6});assert.strictEqual(msg.toString(),\"#==============================================#\\n# 1 3 : 0 0   D A I L Y                        #\\n#                                              #\\n# 1 8 : 0 0   F I S C H S T A E B C H E N ,    #\\n#             S P I N A T   &   E I            #\\n#                                              #\\n# 2 0 : 0 0   S A N D M A E N N C H E N        #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "64bc605f-3c9a-4b31-b553-dd0c88c83439",
                  "parentUUID": "c185ca06-c16e-4c68-b2df-c30f0ec1b63a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove unsupported words",
                  "fullTitle": "Message write() should remove unsupported words",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;msg.write(\"\\u{1F4AA}\\u{1F3FC} Gym\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# G Y M                                        #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "9b4317f5-85cd-4406-8df7-121e99275a64",
                  "parentUUID": "c185ca06-c16e-4c68-b2df-c30f0ec1b63a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec05c5be-b0f5-464a-8c5b-967d6d7dd2a8",
                "ac1d73e2-6438-49e6-ad11-bd5e67758ff6",
                "0d533919-2ebb-4b23-83da-8e9e5db1c068",
                "4a8fde4d-9918-42f5-84b7-7f203b24bed7",
                "64bc605f-3c9a-4b31-b553-dd0c88c83439",
                "9b4317f5-85cd-4406-8df7-121e99275a64"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9d4132c-0ac8-4e03-9746-98a27a2607e4",
              "title": "repeat()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message repeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;msg.repeat(\"\\u{1F7E7}\",{line:2});assert.strictEqual(msg.toString(),\"#==============================================#\\n#                                              #\\n#                                              #\\n# \\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7} #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "dfa7e19c-a152-4f44-a096-158cf543fb80",
                  "parentUUID": "e9d4132c-0ac8-4e03-9746-98a27a2607e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfa7e19c-a152-4f44-a096-158cf543fb80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f4d2825-274e-4bd9-8937-d1c397eff247",
              "title": "word2char()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message word2char() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(import_message.default.word2chars(\"Hello\"),[8,5,12,12,15])",
                  "err": {},
                  "uuid": "1871b4f9-1902-4f5a-9107-7bdd7216b840",
                  "parentUUID": "2f4d2825-274e-4bd9-8937-d1c397eff247",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle german Umlaute",
                  "fullTitle": "Message word2char() should handle german Umlaute",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(import_message.default.word2chars(\"K\\xE4se\"),[11,1,5,19,5])",
                  "err": {},
                  "uuid": "cf57befc-4c3c-4d29-ae7c-ef02178994a5",
                  "parentUUID": "2f4d2825-274e-4bd9-8937-d1c397eff247",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle color emojis",
                  "fullTitle": "Message word2char() should handle color emojis",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(import_message.default.word2chars(\"\\u{1F7E5}\\u{1F7E7}\\u{1F7E8}\\u{1F7E9}\\u{1F7E6}\\u{1F7EA}\\u2B1C\\u2B1B\"),[63,64,65,66,67,68,69,0])",
                  "err": {},
                  "uuid": "6eaf6f22-b83f-46e1-8c8d-2b87cad7a4a5",
                  "parentUUID": "2f4d2825-274e-4bd9-8937-d1c397eff247",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove special chars",
                  "fullTitle": "Message word2char() should remove special chars",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(import_message.default.word2chars(\"H\\xE9llo\"),[8,60,12,12,15])",
                  "err": {},
                  "uuid": "fdb2d49a-5aae-40ed-b3bf-6db50045c8a5",
                  "parentUUID": "2f4d2825-274e-4bd9-8937-d1c397eff247",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1871b4f9-1902-4f5a-9107-7bdd7216b840",
                "cf57befc-4c3c-4d29-ae7c-ef02178994a5",
                "6eaf6f22-b83f-46e1-8c8d-2b87cad7a4a5",
                "fdb2d49a-5aae-40ed-b3bf-6db50045c8a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6e0269d7-013e-404c-ad2d-888787520fc6",
              "title": "centerLines()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message centerLines() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;msg.write(\"Hello World\");msg.write(\"This is a test.\",{line:import_message.MessageWriteOptionsLine.NEXT});msg.centerLines();assert.strictEqual(msg.toString(),\"#==============================================#\\n#           H E L L O   W O R L D              #\\n#       T H I S   I S   A   T E S T .          #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "88b98920-a355-4277-ada5-db42a3f7f569",
                  "parentUUID": "6e0269d7-013e-404c-ad2d-888787520fc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88b98920-a355-4277-ada5-db42a3f7f569"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf447b92-fe72-4dd0-8953-80ce8400ac53",
              "title": "center()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message center() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;msg.write(\"Hello World\");msg.write(\"This is a test.\",{line:import_message.MessageWriteOptionsLine.NEXT});msg.center();assert.strictEqual(msg.toString(),\"#==============================================#\\n#                                              #\\n#                                              #\\n#       H E L L O   W O R L D                  #\\n#       T H I S   I S   A   T E S T .          #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "d73f342b-d4a9-47d1-87a8-77d15ea210b5",
                  "parentUUID": "bf447b92-fe72-4dd0-8953-80ce8400ac53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d73f342b-d4a9-47d1-87a8-77d15ea210b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b09fee3-c2e0-47a4-89e9-ebab0c216c6c",
              "title": "isEmpty()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message isEmpty() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new import_message.default;assert.strictEqual(msg.isEmpty(),true);msg.write(\"Hi\");assert.strictEqual(msg.isEmpty(),false)",
                  "err": {},
                  "uuid": "beef8e6d-bdac-4851-a755-99dab44550d8",
                  "parentUUID": "9b09fee3-c2e0-47a4-89e9-ebab0c216c6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "beef8e6d-bdac-4851-a755-99dab44550d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27412a85-f6fb-46cd-98b7-164930fecf10",
              "title": "toString()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty board",
                  "fullTitle": "Message toString() should work with empty board",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=new import_message.default().toString();const expected=`#==============================================#\n#                                              #\n#                                              #\n#                                              #\n#                                              #\n#                                              #\n#                                              #\n#==============================================#\n`;assert.strictEqual(result,expected)",
                  "err": {},
                  "uuid": "e51ec582-c865-4f61-a099-dd2327300e99",
                  "parentUUID": "27412a85-f6fb-46cd-98b7-164930fecf10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with any supported char",
                  "fullTitle": "Message toString() should work with any supported char",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const board=[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44],[46,47,48,49,50,52,53,54,55,56,59,60,62,63,64,65,66,67,68,69,70,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];const result=new import_message.default(board).toString();const expected=`#==============================================#\n#   A B C D E F G H I J K L M N O P Q R S T U  #\n# V W X Y Z 1 2 3 4 5 6 7 8 9 0 ! @ # $ ( ) -  #\n# + & = ; : ' \" % , . / ? \\xB0 \\u{1F7E5}\\u{1F7E7}\\u{1F7E8}\\u{1F7E9}\\u{1F7E6}\\u{1F7EA}\\u2B1C\\uFE0F     #\n#                                              #\n#                                              #\n#                                              #\n#==============================================#\n`;assert.strictEqual(result,expected)",
                  "err": {},
                  "uuid": "f0ea9e2d-496a-48ed-8a42-2162522a3ce1",
                  "parentUUID": "27412a85-f6fb-46cd-98b7-164930fecf10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e51ec582-c865-4f61-a099-dd2327300e99",
                "f0ea9e2d-496a-48ed-8a42-2162522a3ce1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}