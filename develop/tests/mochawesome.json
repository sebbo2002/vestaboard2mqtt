{
  "stats": {
    "suites": 12,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-10T19:59:11.900Z",
    "end": "2025-06-10T19:59:11.931Z",
    "duration": 31,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0c10667a-835c-4271-8074-396acb07dc44",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "145565cc-bfaf-4f89-bc3a-3b13b611de20",
          "title": "Cache",
          "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/cache.ts",
          "file": "/test/lib/cache.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "40b2c955-ef07-4019-8a17-450dec3d6ae4",
              "title": "set() / get() / delete()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/cache.ts",
              "file": "/test/lib/cache.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Cache set() / get() / delete() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cache=new Cache(\"tests\");assert.strictEqual(await cache.get(\"test\"),null);await cache.set(\"test\",\"foo\");assert.strictEqual(await cache.get(\"test\"),\"foo\");await cache.delete(\"test\")",
                  "err": {},
                  "uuid": "d852a98c-3c8b-4071-a35d-6038a1c2cdcc",
                  "parentUUID": "40b2c955-ef07-4019-8a17-450dec3d6ae4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d852a98c-3c8b-4071-a35d-6038a1c2cdcc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1711c80c-c095-4a7b-8ece-0cc8183e213e",
          "title": "Calendar",
          "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/calendar.ts",
          "file": "/test/lib/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "98875471-aff0-408a-953e-9185464f65e4",
              "title": "isSameDay()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/calendar.ts",
              "file": "/test/lib/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (1)",
                  "fullTitle": "Calendar isSameDay() should work (1)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new Date;const b=new Date;assert.equal(CalendarPage.isSameDay(a,b),true)",
                  "err": {},
                  "uuid": "b87fc11b-37ef-424f-9c90-a70711d224c0",
                  "parentUUID": "98875471-aff0-408a-953e-9185464f65e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (2)",
                  "fullTitle": "Calendar isSameDay() should work (2)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new Date(\"2022-01-10T10:35:00.000Z\");const b=new Date(\"2022-02-10T10:35:00.000Z\");assert.equal(CalendarPage.isSameDay(a,b),false)",
                  "err": {},
                  "uuid": "1ec86b63-179d-4bbe-8125-3077f1734ad3",
                  "parentUUID": "98875471-aff0-408a-953e-9185464f65e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b87fc11b-37ef-424f-9c90-a70711d224c0",
                "1ec86b63-179d-4bbe-8125-3077f1734ad3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "148e3e99-5151-46fb-8005-0b6cdb91f785",
          "title": "Message",
          "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
          "file": "/test/lib/message.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "daaeb0c5-4249-455e-b83f-1e045a0c7090",
              "title": "write()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start writing from top/left",
                  "fullTitle": "Message write() should start writing from top/left",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Hello World\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# H E L L O   W O R L D                        #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "989c3f7c-bbb1-4e9d-ad5a-21087464523b",
                  "parentUUID": "daaeb0c5-4249-455e-b83f-1e045a0c7090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept line & row for positioning",
                  "fullTitle": "Message write() should accept line & row for positioning",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Hello World\",{line:2,row:5});assert.strictEqual(msg.toString(),\"#==============================================#\\n#                                              #\\n#                                              #\\n#           H E L L O   W O R L D              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "5c633e96-ad7c-4844-9e55-5a4e9c379c94",
                  "parentUUID": "daaeb0c5-4249-455e-b83f-1e045a0c7090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add another line if text is too long",
                  "fullTitle": "Message write() should add another line if text is too long",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# L O R E M   I P S U M   D O L O R   S I T    #\\n# A M E T ,   C O N S E T E T U R              #\\n# S A D I P S C I N G   E L I T R ,   S E D    #\\n# D I A M   N O N U M Y   E I R M O D          #\\n# T E M P O R   I N V I D U N T                #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "7460ab68-5474-4463-b442-840114cec86b",
                  "parentUUID": "daaeb0c5-4249-455e-b83f-1e045a0c7090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with words > board length",
                  "fullTitle": "Message write() should work with words > board length",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Lorem-ipsum-dolor-sit-amet\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# L O R E M - I P S U M - D O L O R - S I T -  #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "32821d1a-5e12-4d02-9211-c9f6c4a6bc1d",
                  "parentUUID": "daaeb0c5-4249-455e-b83f-1e045a0c7090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow to use CURRENT and NEXT line flags",
                  "fullTitle": "Message write() should allow to use CURRENT and NEXT line flags",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"13:00\",{line:MessageWriteOptionsLine.CURRENT});msg.write(\"Daily\",{line:MessageWriteOptionsLine.CURRENT,row:6});msg.write(\"\",{line:MessageWriteOptionsLine.NEXT});msg.write(\"18:00\",{line:MessageWriteOptionsLine.NEXT});msg.write(\"Fischst\\xE4bchen, Spinat & Ei\",{line:MessageWriteOptionsLine.CURRENT,row:6});msg.write(\"\",{line:MessageWriteOptionsLine.NEXT});msg.write(\"20:00\",{line:MessageWriteOptionsLine.NEXT});msg.write(\"Sandm\\xE4nnchen\",{line:MessageWriteOptionsLine.CURRENT,row:6});assert.strictEqual(msg.toString(),\"#==============================================#\\n# 1 3 : 0 0   D A I L Y                        #\\n#                                              #\\n# 1 8 : 0 0   F I S C H S T A E B C H E N ,    #\\n#             S P I N A T   &   E I            #\\n#                                              #\\n# 2 0 : 0 0   S A N D M A E N N C H E N        #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "42ee820d-3c84-4e71-9db4-7a74f0505923",
                  "parentUUID": "daaeb0c5-4249-455e-b83f-1e045a0c7090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove unsupported words",
                  "fullTitle": "Message write() should remove unsupported words",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"\\u{1F4AA}\\u{1F3FC} Gym\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# G Y M                                        #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "2b39970b-8ce3-48e2-a56b-896f9f9a0a8b",
                  "parentUUID": "daaeb0c5-4249-455e-b83f-1e045a0c7090",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "989c3f7c-bbb1-4e9d-ad5a-21087464523b",
                "5c633e96-ad7c-4844-9e55-5a4e9c379c94",
                "7460ab68-5474-4463-b442-840114cec86b",
                "32821d1a-5e12-4d02-9211-c9f6c4a6bc1d",
                "42ee820d-3c84-4e71-9db4-7a74f0505923",
                "2b39970b-8ce3-48e2-a56b-896f9f9a0a8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fbb070bf-c282-44c2-8dc1-8a293585da21",
              "title": "repeat()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message repeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.repeat(\"\\u{1F7E7}\",{line:2});assert.strictEqual(msg.toString(),\"#==============================================#\\n#                                              #\\n#                                              #\\n# \\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7} #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "0119284d-374a-44eb-a20c-329b8c031a5c",
                  "parentUUID": "fbb070bf-c282-44c2-8dc1-8a293585da21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0119284d-374a-44eb-a20c-329b8c031a5c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a86b9362-2f69-4388-8ec1-0a5b8e391306",
              "title": "word2char()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message word2char() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.word2chars(\"Hello\"),[8,5,12,12,15])",
                  "err": {},
                  "uuid": "764cef3d-22c3-4612-b395-e13aad438cda",
                  "parentUUID": "a86b9362-2f69-4388-8ec1-0a5b8e391306",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle german Umlaute",
                  "fullTitle": "Message word2char() should handle german Umlaute",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.word2chars(\"K\\xE4se\"),[11,1,5,19,5])",
                  "err": {},
                  "uuid": "3e453ef9-5d9a-4468-9ea0-ad1f80c527d3",
                  "parentUUID": "a86b9362-2f69-4388-8ec1-0a5b8e391306",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle color emojis",
                  "fullTitle": "Message word2char() should handle color emojis",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.word2chars(\"\\u{1F7E5}\\u{1F7E7}\\u{1F7E8}\\u{1F7E9}\\u{1F7E6}\\u{1F7EA}\\u2B1C\\u2B1B\"),[63,64,65,66,67,68,69,0])",
                  "err": {},
                  "uuid": "cc1c7029-542d-4c2d-8e12-54cbb44713cd",
                  "parentUUID": "a86b9362-2f69-4388-8ec1-0a5b8e391306",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove special chars",
                  "fullTitle": "Message word2char() should remove special chars",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.word2chars(\"H\\xE9llo\"),[8,60,12,12,15])",
                  "err": {},
                  "uuid": "e68aa61b-62c6-4756-9625-f73044e40f25",
                  "parentUUID": "a86b9362-2f69-4388-8ec1-0a5b8e391306",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "764cef3d-22c3-4612-b395-e13aad438cda",
                "3e453ef9-5d9a-4468-9ea0-ad1f80c527d3",
                "cc1c7029-542d-4c2d-8e12-54cbb44713cd",
                "e68aa61b-62c6-4756-9625-f73044e40f25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "750fb21f-4b83-4f3d-85c1-7c3d08d5eb24",
              "title": "centerLines()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message centerLines() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Hello World\");msg.write(\"This is a test.\",{line:MessageWriteOptionsLine.NEXT});msg.centerLines();assert.strictEqual(msg.toString(),\"#==============================================#\\n#           H E L L O   W O R L D              #\\n#       T H I S   I S   A   T E S T .          #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "b0090446-70aa-4524-9500-2d17cb58b660",
                  "parentUUID": "750fb21f-4b83-4f3d-85c1-7c3d08d5eb24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0090446-70aa-4524-9500-2d17cb58b660"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "61bfe379-d830-4fb0-aa48-8c59bc30bb3f",
              "title": "center()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message center() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Hello World\");msg.write(\"This is a test.\",{line:MessageWriteOptionsLine.NEXT});msg.center();assert.strictEqual(msg.toString(),\"#==============================================#\\n#                                              #\\n#                                              #\\n#       H E L L O   W O R L D                  #\\n#       T H I S   I S   A   T E S T .          #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "bb268f59-55e6-4c1e-883b-ee85dda5d22d",
                  "parentUUID": "61bfe379-d830-4fb0-aa48-8c59bc30bb3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb268f59-55e6-4c1e-883b-ee85dda5d22d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7317f8af-d355-4916-af0c-9823b09bc3f8",
              "title": "isEmpty()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message isEmpty() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;assert.strictEqual(msg.isEmpty(),true);msg.write(\"Hi\");assert.strictEqual(msg.isEmpty(),false)",
                  "err": {},
                  "uuid": "1d6bda51-33d5-4c74-bc8c-b178f86ca3a8",
                  "parentUUID": "7317f8af-d355-4916-af0c-9823b09bc3f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d6bda51-33d5-4c74-bc8c-b178f86ca3a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "126266e9-0f83-4162-b3aa-60326d04869c",
              "title": "toString()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty board",
                  "fullTitle": "Message toString() should work with empty board",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=new Message().toString();const expected=`#==============================================#\n#                                              #\n#                                              #\n#                                              #\n#                                              #\n#                                              #\n#                                              #\n#==============================================#\n`;assert.strictEqual(result,expected)",
                  "err": {},
                  "uuid": "d4e82325-bbdb-441b-bd65-83e0d4a62e48",
                  "parentUUID": "126266e9-0f83-4162-b3aa-60326d04869c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with any supported char",
                  "fullTitle": "Message toString() should work with any supported char",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const board=[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44],[46,47,48,49,50,52,53,54,55,56,59,60,62,63,64,65,66,67,68,69,70,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];const result=new Message(board).toString();const expected=`#==============================================#\n#   A B C D E F G H I J K L M N O P Q R S T U  #\n# V W X Y Z 1 2 3 4 5 6 7 8 9 0 ! @ # $ ( ) -  #\n# + & = ; : ' \" % , . / ? \\xB0 \\u{1F7E5}\\u{1F7E7}\\u{1F7E8}\\u{1F7E9}\\u{1F7E6}\\u{1F7EA}\\u2B1C\\uFE0F     #\n#                                              #\n#                                              #\n#                                              #\n#==============================================#\n`;assert.strictEqual(result,expected)",
                  "err": {},
                  "uuid": "c1c3b258-1f3c-4671-91bb-1d6ba1fc7505",
                  "parentUUID": "126266e9-0f83-4162-b3aa-60326d04869c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4e82325-bbdb-441b-bd65-83e0d4a62e48",
                "c1c3b258-1f3c-4671-91bb-1d6ba1fc7505"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}