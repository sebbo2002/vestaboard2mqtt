{
  "stats": {
    "suites": 12,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-05T08:31:10.276Z",
    "end": "2025-02-05T08:31:10.308Z",
    "duration": 32,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b4136094-fd18-4e08-8e54-ce5f9ced719c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "08731241-84f0-47e8-b79e-d67b0d11c260",
          "title": "Cache",
          "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/cache.ts",
          "file": "/test/lib/cache.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "16bc0949-7e10-4021-8dd0-3ba35fcb97f2",
              "title": "set() / get() / delete()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/cache.ts",
              "file": "/test/lib/cache.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Cache set() / get() / delete() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cache=new Cache(\"tests\");assert.strictEqual(await cache.get(\"test\"),null);await cache.set(\"test\",\"foo\");assert.strictEqual(await cache.get(\"test\"),\"foo\");await cache.delete(\"test\")",
                  "err": {},
                  "uuid": "14d7db25-262b-4938-a9f8-77636a54f6e9",
                  "parentUUID": "16bc0949-7e10-4021-8dd0-3ba35fcb97f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14d7db25-262b-4938-a9f8-77636a54f6e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "580127a5-7ca9-4dc3-8769-a9c94fcb9437",
          "title": "Calendar",
          "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/calendar.ts",
          "file": "/test/lib/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "20504a83-5e67-40a8-ac40-b495b6436510",
              "title": "isSameDay()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/calendar.ts",
              "file": "/test/lib/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (1)",
                  "fullTitle": "Calendar isSameDay() should work (1)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new Date;const b=new Date;assert.equal(CalendarPage.isSameDay(a,b),true)",
                  "err": {},
                  "uuid": "ab6964e3-17d7-4491-92f9-33ed0e5dc4fd",
                  "parentUUID": "20504a83-5e67-40a8-ac40-b495b6436510",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (2)",
                  "fullTitle": "Calendar isSameDay() should work (2)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new Date(\"2022-01-10T10:35:00.000Z\");const b=new Date(\"2022-02-10T10:35:00.000Z\");assert.equal(CalendarPage.isSameDay(a,b),false)",
                  "err": {},
                  "uuid": "ff4b9bf1-4410-4cd1-b188-5789781c77ff",
                  "parentUUID": "20504a83-5e67-40a8-ac40-b495b6436510",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab6964e3-17d7-4491-92f9-33ed0e5dc4fd",
                "ff4b9bf1-4410-4cd1-b188-5789781c77ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e3223b89-1b06-40e7-af6a-4d08027197a6",
          "title": "Message",
          "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
          "file": "/test/lib/message.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2e1d9373-5cff-4b35-8330-a9e44e015213",
              "title": "write()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start writing from top/left",
                  "fullTitle": "Message write() should start writing from top/left",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Hello World\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# H E L L O   W O R L D                        #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "ab528942-c733-4b6a-bc04-ec648fd46421",
                  "parentUUID": "2e1d9373-5cff-4b35-8330-a9e44e015213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept line & row for positioning",
                  "fullTitle": "Message write() should accept line & row for positioning",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Hello World\",{line:2,row:5});assert.strictEqual(msg.toString(),\"#==============================================#\\n#                                              #\\n#                                              #\\n#           H E L L O   W O R L D              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "0a2c2143-9461-42c3-a36a-72fb1dfa3ac5",
                  "parentUUID": "2e1d9373-5cff-4b35-8330-a9e44e015213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add another line if text is too long",
                  "fullTitle": "Message write() should add another line if text is too long",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# L O R E M   I P S U M   D O L O R   S I T    #\\n# A M E T ,   C O N S E T E T U R              #\\n# S A D I P S C I N G   E L I T R ,   S E D    #\\n# D I A M   N O N U M Y   E I R M O D          #\\n# T E M P O R   I N V I D U N T                #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "7d50eb18-c070-4317-9393-e12d2c82ccfd",
                  "parentUUID": "2e1d9373-5cff-4b35-8330-a9e44e015213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with words > board length",
                  "fullTitle": "Message write() should work with words > board length",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Lorem-ipsum-dolor-sit-amet\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# L O R E M - I P S U M - D O L O R - S I T -  #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "4bb95232-c842-4143-a127-82c8d100f792",
                  "parentUUID": "2e1d9373-5cff-4b35-8330-a9e44e015213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow to use CURRENT and NEXT line flags",
                  "fullTitle": "Message write() should allow to use CURRENT and NEXT line flags",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"13:00\",{line:MessageWriteOptionsLine.CURRENT});msg.write(\"Daily\",{line:MessageWriteOptionsLine.CURRENT,row:6});msg.write(\"\",{line:MessageWriteOptionsLine.NEXT});msg.write(\"18:00\",{line:MessageWriteOptionsLine.NEXT});msg.write(\"Fischst\\xE4bchen, Spinat & Ei\",{line:MessageWriteOptionsLine.CURRENT,row:6});msg.write(\"\",{line:MessageWriteOptionsLine.NEXT});msg.write(\"20:00\",{line:MessageWriteOptionsLine.NEXT});msg.write(\"Sandm\\xE4nnchen\",{line:MessageWriteOptionsLine.CURRENT,row:6});assert.strictEqual(msg.toString(),\"#==============================================#\\n# 1 3 : 0 0   D A I L Y                        #\\n#                                              #\\n# 1 8 : 0 0   F I S C H S T A E B C H E N ,    #\\n#             S P I N A T   &   E I            #\\n#                                              #\\n# 2 0 : 0 0   S A N D M A E N N C H E N        #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "9f4a0285-4473-448b-815c-f77812351625",
                  "parentUUID": "2e1d9373-5cff-4b35-8330-a9e44e015213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove unsupported words",
                  "fullTitle": "Message write() should remove unsupported words",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"\\u{1F4AA}\\u{1F3FC} Gym\");assert.strictEqual(msg.toString(),\"#==============================================#\\n# G Y M                                        #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "e3638468-976e-4b84-a952-069403aeb13e",
                  "parentUUID": "2e1d9373-5cff-4b35-8330-a9e44e015213",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab528942-c733-4b6a-bc04-ec648fd46421",
                "0a2c2143-9461-42c3-a36a-72fb1dfa3ac5",
                "7d50eb18-c070-4317-9393-e12d2c82ccfd",
                "4bb95232-c842-4143-a127-82c8d100f792",
                "9f4a0285-4473-448b-815c-f77812351625",
                "e3638468-976e-4b84-a952-069403aeb13e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d083bb7d-baef-42e2-b19b-bb58f669d6c8",
              "title": "repeat()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message repeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.repeat(\"\\u{1F7E7}\",{line:2});assert.strictEqual(msg.toString(),\"#==============================================#\\n#                                              #\\n#                                              #\\n# \\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7}\\u{1F7E7} #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "03455c0d-9a26-43bf-b446-8459021dd06b",
                  "parentUUID": "d083bb7d-baef-42e2-b19b-bb58f669d6c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03455c0d-9a26-43bf-b446-8459021dd06b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4af9b3a9-ad76-4227-a009-89c17f370724",
              "title": "word2char()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message word2char() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.word2chars(\"Hello\"),[8,5,12,12,15])",
                  "err": {},
                  "uuid": "b0cf793b-a45d-43c0-b177-fc1db4d08678",
                  "parentUUID": "4af9b3a9-ad76-4227-a009-89c17f370724",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle german Umlaute",
                  "fullTitle": "Message word2char() should handle german Umlaute",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.word2chars(\"K\\xE4se\"),[11,1,5,19,5])",
                  "err": {},
                  "uuid": "6e6060b8-6565-4dec-9c0c-6477b098f403",
                  "parentUUID": "4af9b3a9-ad76-4227-a009-89c17f370724",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle color emojis",
                  "fullTitle": "Message word2char() should handle color emojis",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.word2chars(\"\\u{1F7E5}\\u{1F7E7}\\u{1F7E8}\\u{1F7E9}\\u{1F7E6}\\u{1F7EA}\\u2B1C\\u2B1B\"),[63,64,65,66,67,68,69,0])",
                  "err": {},
                  "uuid": "801fcd7b-1cc5-46f2-9cf6-f483d50c339d",
                  "parentUUID": "4af9b3a9-ad76-4227-a009-89c17f370724",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove special chars",
                  "fullTitle": "Message word2char() should remove special chars",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.word2chars(\"H\\xE9llo\"),[8,60,12,12,15])",
                  "err": {},
                  "uuid": "b4a1ffb5-78d6-468c-8d33-bf654f5ae44f",
                  "parentUUID": "4af9b3a9-ad76-4227-a009-89c17f370724",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0cf793b-a45d-43c0-b177-fc1db4d08678",
                "6e6060b8-6565-4dec-9c0c-6477b098f403",
                "801fcd7b-1cc5-46f2-9cf6-f483d50c339d",
                "b4a1ffb5-78d6-468c-8d33-bf654f5ae44f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f874d07-b861-494c-8afe-18175627180f",
              "title": "centerLines()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message centerLines() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Hello World\");msg.write(\"This is a test.\",{line:MessageWriteOptionsLine.NEXT});msg.centerLines();assert.strictEqual(msg.toString(),\"#==============================================#\\n#           H E L L O   W O R L D              #\\n#       T H I S   I S   A   T E S T .          #\\n#                                              #\\n#                                              #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "59f4c5ab-f1fd-4fa1-918d-9b375753048b",
                  "parentUUID": "0f874d07-b861-494c-8afe-18175627180f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59f4c5ab-f1fd-4fa1-918d-9b375753048b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "479df08d-5067-4c6a-907f-cd40bc13ada3",
              "title": "center()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message center() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;msg.write(\"Hello World\");msg.write(\"This is a test.\",{line:MessageWriteOptionsLine.NEXT});msg.center();assert.strictEqual(msg.toString(),\"#==============================================#\\n#                                              #\\n#                                              #\\n#       H E L L O   W O R L D                  #\\n#       T H I S   I S   A   T E S T .          #\\n#                                              #\\n#                                              #\\n#==============================================#\\n\")",
                  "err": {},
                  "uuid": "6740fa72-a476-42ef-8410-0f1b794b1655",
                  "parentUUID": "479df08d-5067-4c6a-907f-cd40bc13ada3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6740fa72-a476-42ef-8410-0f1b794b1655"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47fc7972-5a16-45c1-b0a1-9e316d3bdfb3",
              "title": "isEmpty()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message isEmpty() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg=new Message;assert.strictEqual(msg.isEmpty(),true);msg.write(\"Hi\");assert.strictEqual(msg.isEmpty(),false)",
                  "err": {},
                  "uuid": "ede3a8f0-4e07-4d8e-a9ab-38466db4902c",
                  "parentUUID": "47fc7972-5a16-45c1-b0a1-9e316d3bdfb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ede3a8f0-4e07-4d8e-a9ab-38466db4902c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef8c4167-fc5a-497f-a861-82a11345c3f0",
              "title": "toString()",
              "fullFile": "/home/runner/work/vestaboard2mqtt/vestaboard2mqtt/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty board",
                  "fullTitle": "Message toString() should work with empty board",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=new Message().toString();const expected=`#==============================================#\n#                                              #\n#                                              #\n#                                              #\n#                                              #\n#                                              #\n#                                              #\n#==============================================#\n`;assert.strictEqual(result,expected)",
                  "err": {},
                  "uuid": "416fe1ac-4c19-44bb-809b-a5619849a89d",
                  "parentUUID": "ef8c4167-fc5a-497f-a861-82a11345c3f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with any supported char",
                  "fullTitle": "Message toString() should work with any supported char",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const board=[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44],[46,47,48,49,50,52,53,54,55,56,59,60,62,63,64,65,66,67,68,69,70,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];const result=new Message(board).toString();const expected=`#==============================================#\n#   A B C D E F G H I J K L M N O P Q R S T U  #\n# V W X Y Z 1 2 3 4 5 6 7 8 9 0 ! @ # $ ( ) -  #\n# + & = ; : ' \" % , . / ? \\xB0 \\u{1F7E5}\\u{1F7E7}\\u{1F7E8}\\u{1F7E9}\\u{1F7E6}\\u{1F7EA}\\u2B1C\\uFE0F     #\n#                                              #\n#                                              #\n#                                              #\n#==============================================#\n`;assert.strictEqual(result,expected)",
                  "err": {},
                  "uuid": "f1f157f3-b787-4d59-aa9d-c7cbfa6db088",
                  "parentUUID": "ef8c4167-fc5a-497f-a861-82a11345c3f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "416fe1ac-4c19-44bb-809b-a5619849a89d",
                "f1f157f3-b787-4d59-aa9d-c7cbfa6db088"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}